use crate::parser_utils::LexError;
use super::{Flowchart, Direction, Statement, Connection, ConnStyle, Node, lexer::Token};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = LexError;

    enum Token<'input> {
        "flowchart" => Token::Flowchart,
        "TD" => Token::TopDown,
        "LR" => Token::LeftRight,

        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "<" => Token::LArrow,
        ">" => Token::RArrow,
        "/" => Token::Slash,
        "\\" => Token::BSlash,
        "&" => Token::Amp,

        "---" => Token::Link,
        "--" => Token::LinkStart,
        "-->" => Token::LRArrow,

        Ident => Token::Ident(<&'input str>),
        String => Token::String(<&'input str>),
    }
}

pub Flowchart: Flowchart<'input> = "flowchart" <dir:Direction> <spec:Spec> => {
    Flowchart { dir, spec }
};

Direction: Direction = {
    "TD" => Direction::TopDown,
    "LR" => Direction::LeftRight,
}

Spec = Statement*;

Statement: Statement<'input> = <left:Node> <connection:Connection> <right:Node> =>
    Statement { left, right, connection };

Node: Node<'input> = Ident => {
    Node {
        label: <>,
        style: (),
    }
};

Connection: Connection<'input> = {
    "---" => {
        Connection {
            line_style: LineStyle::Normal,
            arrowed: false,
            label: ""
        }
    },
    "-->" => {
        Connection {
            left_style: ConnStyle::None,
            start_arrow: true,
            label: ""
        }
    },
}
